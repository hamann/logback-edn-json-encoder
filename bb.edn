{:min-bb-version "1.3.0"
 :tasks
 {:requires ([babashka.fs :as fs]
             [babashka.process :as p]
             [cheshire.core :as json])

  clean
  {:doc "Clean target directory"
   :task (do
           (println "Cleaning target directory...")
           (when (fs/exists? "target")
             (fs/delete-tree "target"))
           (println "✓ Clean completed"))}

  compile
  {:doc "Compile Clojure to Java classes"
   :depends [clean]
   :task (do
           (println "Compiling Clojure classes...")
           (fs/create-dirs "target/classes")
           (p/shell "clojure" "-T:build" "compile-clj")
           (println "✓ Compilation completed"))}

  jar
  {:doc "Build JAR file"
   :task (do
           (println "Building JAR...")
           (fs/create-dirs "target")
           (p/shell "clojure" "-T:build" "jar")
           (println "✓ JAR created"))}

  build
  {:doc "Full build: clean, compile, jar"
   :depends [clean compile jar]
   :task (println "✓ Build completed successfully!")}

  test
  {:doc "Run tests"
   :task (do
           (println "Running tests...")
           (let [result (p/shell {:out :inherit :err :inherit}
                                 "clojure" "-M:test")]
             (when (not= 0 (:exit result))
               (throw (ex-info "Tests failed" result))))
           (println "✓ All tests passed"))}

  lint
  {:doc "Run clj-kondo linting"
   :task (do
           (println "Running clj-kondo...")
           (try
             (let [result (p/shell {:continue true}
                                   "clj-kondo" "--lint" "src" "test")]
               (when (not= 0 (:exit result))
                 (throw (ex-info "Linting failed" result))))
             (println "✓ clj-kondo passed")
             (catch java.io.IOException e
               (println "⚠ clj-kondo not installed. Install with:")
               (println "  brew install clj-kondo")
               (throw e))))}

  lint-fix
  {:doc "Auto-fix clj-kondo issues where possible"
   :task (do
           (println "Running clj-kondo with auto-fix...")
           (p/shell "clj-kondo" "--lint" "src" "test" "--auto-fix")
           (println "✓ Auto-fixes applied"))}

  dev
  {:doc "Start REPL for development"
   :task (p/shell "clojure" "-M:repl/cider")}

  ci
  {:doc "CI pipeline: check + build + test"
   :depends [build test]
   :task (println "✓ CI pipeline completed successfully!")}

  loki
  {:doc "Starts a local loki instance for testing"
   :task (p/shell "loki" "-config.file=config/loki.yaml")}

  grafana
  {:doc "Starts a local grafana instance for testing"
   :task (let [base-path (-> (fs/which "grafana") fs/parent fs/parent)
               conf "./tmp/grafana/conf"
               public "./tmp/grafana/public"
               loki-ds "./tmp/grafana/provisioning/datasources/loki.yaml"]
           ;; assume nix setup
           (fs/create-dirs "./tmp/grafana/provisioning/datasources")
           (when-not (fs/exists? conf)
             (fs/create-sym-link conf (str base-path "/share/grafana/conf")))
           (when-not (fs/exists? public)
             (fs/create-sym-link public (str base-path "/share/grafana/public")))
           (when-not (fs/exists? loki-ds)
             (fs/create-sym-link loki-ds (fs/absolutize "./config/provisioning-loki.yaml")))
           (p/shell "grafana" "server" "-homepath" "./tmp/grafana" "-config" "./config/grafana.ini"))}

  publish
  {:doc "Build and publish to Maven repository using SOPS-encrypted credentials"
   :depends [build]
   :task (do
           (println "Publishing to Maven repository...")
           (println "Decrypting credentials from SOPS...")

           ;; Check if secrets file exists
           (when-not (fs/exists? "secrets.yaml")
             (throw (ex-info "secrets.yaml not found. Please create and encrypt it with SOPS." {})))

           ;; Decrypt secrets using SOPS
           (let [secrets-result (p/shell {:out :string :continue true} "sops" "-d" "--output-type" "json" "secrets.yaml")]
             (when (not= 0 (:exit secrets-result))
               (throw (ex-info "Failed to decrypt secrets with SOPS. Check your keys." secrets-result)))

             ;; Parse the decrypted JSON
             (let [secrets-content (:out secrets-result)
                   {:keys [clojars]} (json/parse-string secrets-content keyword)
                   username (:username clojars)
                   password (:password clojars)]

               (when (or (not username) (not password))
                 (throw (ex-info "Could not extract username/password from secrets.yaml :clojars map" {})))

               (println "✓ Credentials decrypted successfully")

               ;; Copy POM file to expected location
               (fs/copy "target/classes/META-INF/maven/com.github.hamann/edn-json-encoder/pom.xml" "pom.xml")

               ;; Set environment variables and run deploy
               (let [result (p/shell {:continue true
                                      :extra-env {"CLOJARS_USERNAME" username
                                                  "CLOJARS_PASSWORD" password}}
                                     "clojure" "-X:deploy" 
                                     ":artifact" "target/edn-json-encoder-0.1.0.jar")]
                 (if (= 0 (:exit result))
                   (println "✓ Successfully published to Maven repository!")
                   (do
                     (println "✗ Publication failed. Check your credentials and network connection.")
                     (throw (ex-info "Publication failed" result))))))))}}}}
